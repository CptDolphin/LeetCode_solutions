844. Backspace String Compare
Easy

Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".

Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".

Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".

Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".

Note:

    1 <= S.length <= 200
    1 <= T.length <= 200
    S and T only contain lowercase letters and '#' characters.

Follow up:

    Can you solve it in O(N) time and O(1) space?


#====
# Runtime: 60 ms, faster than 63.47% of JavaScript online submissions for Backspace String Compare.
# Memory Usage: 34.6 MB, less than 66.67% of JavaScript online submissions for Backspace String Compare
var backspaceCompare = function(S, T) {
    let arr = [S, T].map(elem => elem.split('').reduceRight((data, item) => {
        if (item === '#') {
            data.count += 1;
        } else if (data.count > 0) {
            data.count -= 1;
        } else {
            data.value = item + data.value;
        }
        return data;
    }, { count: 0, value: '' }).value)
    return arr[0] === arr[1];
};

#====
# Runtime: 44 ms, faster than 99.64% of JavaScript online submissions for Backspace String Compare.
# Memory Usage: 34.5 MB, less than 100.00% of JavaScript online submissions for Backspace String Compare.

var backspaceCompare = function(S, T) {
    return [S, T].map(elem => elem.split('').reduceRight((data, item) => {
        if (item === '#') {
            data.count += 1;
        } else if (data.count > 0) {
            data.count -= 1;
        } else {
            data.value = item + data.value;
        }
        return data;
    }, { count: 0, value: '' }).value).every((v, i, arr) => v === arr[0]);
};
