Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4



#==========
var singleNumber = function(nums) {
    nums.sort();
    for(let i = 0; i< nums.length; i+=2){
        if(nums[i] !== nums[i+1]){
            return nums[i]
        }
    }
};


#=======
# Runtime: 48 ms, faster than 98.83% of JavaScript online submissions for Single Number.
# Memory Usage: 35.3 MB, less than 92.31% of JavaScript online submissions for Single Number.
const singleNumber = nums => nums.reduce((a, b) => a ^ b);

#======
# Runtime: 380 ms, faster than 7.05% of JavaScript online submissions for Single Number.
# Memory Usage: 35.5 MB, less than 76.92% of JavaScript online submissions for Single Number.
const singleNumber = nums => nums.find(num => nums.indexOf(num) === nums.lastIndexOf(num));
