Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

##=====##=====##=====##=====##

var reverse = function(x) {
    const l = 2**31;
    const m = x < 0 ? -1 : 1;
    const n = Number(String(Math.abs(x)).split('').reverse().join(''));
    return n > l ? 0 : n * m;
};

##=====##=====##=====##=====##

let reverse = function(x) {
    let c = (''+x).split('');
    
    if (c.length > 1){
        if (c[c.length-1] === 0){
            c.pop();
        }
    }
    if (c[0] == '-') {
        c.push(c.shift());
        c.reverse();
    } else {
        c.reverse();
    }
    
    let result = parseInt(c.join(''));
    if ((result > (2**31-1)) || (result < -(2**31))) { 
        return 0;
    } else {
        return result;
    }  
}
