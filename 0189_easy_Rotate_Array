189. Rotate Array
Easy

Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Note:

    Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
    Could you do it in-place with O(1) extra space?

#======
# 10sec code test idea - to be changed
# Runtime: 100 ms, faster than 23.30% of JavaScript online submissions for Rotate Array.
# Memory Usage: 35.3 MB, less than 73.68% of JavaScript online submissions for Rotate Array.

var rotate = function(nums, k) {
    for(let i=0; i<k; i++){
        nums.unshift(nums.pop());
    }
    
    return nums;
};

#======
# nightmare to solve - when figured it doesnt have to return but operate only on existing array
# Runtime: 60 ms, faster than 95.09% of JavaScript online submissions for Rotate Array.
# Memory Usage: 35.1 MB, less than 94.74% of JavaScript online submissions for Rotate Array.

var rotate = function(nums, k) {
    k %= nums.length;
    nums.unshift(...nums.splice(-k));
};

#=== or 1 liner

var rotate = (nums, k) => nums.unshift(...nums.splice(-(k%nums.length)));
