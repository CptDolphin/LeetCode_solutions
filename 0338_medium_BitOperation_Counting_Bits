# 338. Counting Bits
Medium

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]

Example 2:

Input: 5
Output: [0,1,1,2,1,2]

Follow up:

    It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
    Space complexity should be O(n).
    Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.


#======
// First approach - Bad solution, with wrong time complexity
#Runtime: 160 ms, faster than 13.02% of JavaScript online submissions for Counting Bits.
#Memory Usage: 43.8 MB, less than 100.00% of JavaScript online submissions for Counting Bits.

var countBits = function(num) {
    const arr = [];
    for(let i=0; i<=num; i++){
        arr.push(i.toString(2).split('1').length-1)
    }
    return arr;
};

#======
---
####Runtime: 88 ms, faster than 94.87% of JavaScript online submissions for Counting Bits.
#### Memory Usage: 39.7 MB, less than 100.00% of JavaScript online submissions for Counting Bits.
#### Algorithm taken from https://blogs.msdn.microsoft.com/jeuge/2005/06/08/bit-fiddling-3/
#### I'm almost sure it could be shortened even more with beter memoization but oh well
```javascript
var countBits = function(num, memo = []) {
    for(let i=0; i<=num; i++){
        memo.push(count(i));
    }
    
    function count(num){
        let uCount;
        uCount = num - ((num >> 1) & 033333333333) - ((num >> 2) & 011111111111);
        return ((uCount + (uCount >> 3)) & 030707070707) % 63;       
    }
    
    return memo;
};
```

