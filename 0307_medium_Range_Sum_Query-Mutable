307. Range Sum Query - Mutable
Medium

Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8

Note:

    The array is only modifiable by the update function.
    You may assume the number of calls to update and sumRange function is distributed evenly.


#====
# Terribly slow solution - summing up array every time a new update comes - tbf;
# Runtime: 1216 ms, faster than 5.29% of JavaScript online submissions for Range Sum Query - Mutable.
# Memory Usage: 68.8 MB, less than 100.00% of JavaScript online submissions for Range Sum Query - Mutable.

var NumArray = function(nums) {
    this.temp = nums.slice();
    this.result = [];
    let sum = 0;
    this.result = nums.map(el => sum += el);
};

NumArray.prototype.update = function(i, val) {
    let sum = 0;
    this.temp[i] = val;
    this.result = this.temp.map(el => sum += el);
};

NumArray.prototype.sumRange = function(i, j) {
    return this.result[j] - (i > 0 ? this.result[i-1] : 0);
};

#=====
# Speed up by 87% in ms - still feels slow - stopped re-summing up all numbers to just add the difference in new update
# Runtime: 168 ms, faster than 27.51% of JavaScript online submissions for Range Sum Query - Mutable.
# Memory Usage: 46 MB, less than 100.00% of JavaScript online submissions for Range Sum Query - Mutable.

var NumArray = function(nums) {
    this.temp = nums.slice();
    this.result = [];
    let sum = 0;
    this.result = nums.map(el => sum += el);
};

NumArray.prototype.update = function(i, val) {
    let difference = val - this.temp[i];
    this.temp[i] = val;

    for(i; i<this.result.length; i++){
        this.result[i] += difference;
    }
};

NumArray.prototype.sumRange = function(i, j) {
    return this.result[j] - (i > 0 ? this.result[i-1] : 0);
};

