There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5



#========
var findMedianSortedArrays = function(nums1, nums2) {
    let arr = nums1.concat(nums2);
    if(arr.length%2 === 0){
        return (arr[arr.length/2]+arr[arr.length/2-1])/2
    }else {
        return arr[Math.floor(arr.length/2)];  
    }
};




#========
//copied sorting algorithm from net 20sec work -> quicker by 4ms -> 128->124 and uses 0.5mb less ram 39.5 -> 39.0

var findMedianSortedArrays = function(nums1, nums2) {
    let arr = nums1.concat(nums2);
    if(arr.length%2 === 0){
        return (arr[arr.length/2]+arr[arr.length/2-1])/2
    }else {
        return arr[Math.floor(arr.length/2)];  
    }
};

function merge_sorted_array(a, b) {
    var sorted = [], indexA = 0, indexB = 0;

    while (indexA < a.length && indexB < b.length) {
        if (sort_fn(a[indexA], b[indexB]) > 0) {
            sorted.push(b[indexB++]);
        } else {
            sorted.push(a[indexA++]);
        }
    }

    if (indexB < b.length) {
        sorted = sorted.concat(b.slice(indexB));
    } else {
        sorted = sorted.concat(a.slice(indexA));
    }

    return sorted;
}

function sort_fn(a, b) {
    return a - b;
}
