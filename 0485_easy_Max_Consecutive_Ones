485. Max Consecutive Ones
Easy

Given a binary array, find the maximum number of consecutive 1s in this array.

Example 1:

Input: [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s.
    The maximum number of consecutive 1s is 3.

Note:

    The input array will only contain 0 and 1.
    The length of input array is a positive integer and will not exceed 10,000


#=====
# Runtime: 80 ms, faster than 14.52% of JavaScript online submissions for Max Consecutive Ones.
# Memory Usage: 36.8 MB, less than 100.00% of JavaScript online submissions for Max Consecutive Ones.
// Simple solution to test if works

var findMaxConsecutiveOnes = function(nums) {
    let count = 0;
    let temp = 0;
    nums.forEach(num => {
        if(num === 1){
            temp++;
            if(temp > count){
                count = temp;
            }
        } else {
            temp = 0;
        }
    });
    return count;
};

#=====
# Shorter, one liner with regexp and map
# Runtime: 72 ms, faster than 35.03% of JavaScript online submissions for Max Consecutive Ones.
# Memory Usage: 37.5 MB, less than 11.11% of JavaScript online submissions for Max Consecutive Ones.

var findMaxConsecutiveOnes = function(nums) {
    return Math.max(0, ...(nums.join('').match(/1+/g) || ['']).map(el => el.length));      
};


#=====
# Same as above but with reduce
# Runtime: 80 ms, faster than 14.52% of JavaScript online submissions for Max Consecutive Ones.
# Memory Usage: 37.4 MB, less than 11.11% of JavaScript online submissions for Max Consecutive Ones.
var findMaxConsecutiveOnes = function(nums) {
    return (nums.join('').match(/1+/g) || ['']).reduce((a, b) => a > b.length ? a : b.length, 0);
};
