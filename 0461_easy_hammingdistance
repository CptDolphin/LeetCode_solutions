The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.


#=====(68ms fast)

var hammingDistance = function(x, y) {
    let count = 0;
    let result = (x ^ y).toString(2);
    for(let char of result){
        if(char === '1'){
            count++;
        }
    }
    return count;
};

#=====(52ms fast) 16ms faster

var hammingDistance = function(x, y) {
    let count = 0;
    let result = (x ^ y);
    while(result !== 0){
        if(result%2 !== 0){
            count++;
        }
        result >>= 1;
    }
    return count;
};

#==== (32ms fast) 36ms faster

var hammingDistance = function(x, y) {
	return ((x ^ y).toString(2).match(/1/g) || []).length;
};

#==== or same as above but one liner

const hammingDistance = (x, y) => ((x ^ y).toString(2).match(/1/g) || []).length;

