283. Move Zeroes
Easy
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.

#=====
# Runtime: 60 ms, faster than 86.23% of JavaScript online submissions for Move Zeroes.
# Memory Usage: 35.8 MB, less than 38.30% of JavaScript online submissions for Move Zeroes.

var moveZeroes = function(nums) {
    let re = new RegExp('[1-9]','g');
    let index = nums.indexOf(0);
    let count = 0;
    
    while(index !== -1){
        nums.splice(index, 1);
        index = nums.indexOf(0);
        count++;
    }
    
    for(let i=0; i<count; i++){
        nums.push(0);
    }
};

#=====
# Runtime: 52 ms, faster than 98.67% of JavaScript online submissions for Move Zeroes.
# Memory Usage: 35.8 MB, less than 36.17% of JavaScript online submissions for Move Zeroes.

# The trick is to start from right and not 4ever left loop

var moveZeroes = function(nums) {
    for(let i=nums.length-1; i>=0; i--){
        if(nums[i] === 0){
            nums.push(nums.splice(i, 1));
        }
    }
};


#=====
    let count = nums.join('').split(0).length-1;
    nums.match(/[1-9]/g); 

#====
    
    for(let i=0; i<nums.length; i++){
        console.log('nums od i is: ', nums[i]);
        if(nums[i] === 0){
            nums.splice(i,1);
        } else {
            console.log('found 0');
            count++;
        }
    }
    console.log(count);
    while(count > 0){
        nums.push(0);
        count--;
    }
#======
    let re = new RegExp('[1-9]','g');
    let index = nums.indexOf(0);
    let count = 0;
    
    while(index !== -1){
        nums.splice(index, 1);
        count++;
    }
    
    nums.concat(Array(count).fill(0));

#===
